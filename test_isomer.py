import isomer as g

'''directed unweighted graph DUG'''
print('\n'+"directed unweighted:")
DUG = g.IsoGraph(False,True)
DUG.addNode('a')
DUG.addNode('b')
DUG.addNode('c')
DUG.addNode('d')
DUG.specEdge('a','b',1)
DUG.specEdge('a','c',1)
DUG.specEdge('a','d',1)
DUG.specEdge('b','c',1)
print('internal matrix representation:')
DUG.audit()
print("as an adjacency list:")
print str(DUG.adjList())
print("other tests:")
print ("weighted? " + str(DUG.isWeighted()))
print("directed? " + str(DUG.isDirected()))

''' directed weighted graph DWG '''
print('\n'+"directed weighted:")
DWG = g.IsoGraph(True,True)
DWG.addNode('a')
DWG.addNode('b')
DWG.addNode('c')
DWG.addNode('d')
DWG.specEdge('a','b',10)
DWG.specEdge('a','c',100)
DWG.specEdge('a','d',1000)
DWG.specEdge('b','c',10000)
print("internal matrix representation:")
DWG.audit()
print("as an adjacency list:")
print str(DWG.adjList())
print("other tests:")
print ("weighted? " + str(DWG.isWeighted()))
print("directed? " + str(DWG.isDirected()))

''' undirected unweighted UDUG '''
print('\n'+"undirected unweighted:")
UDUG = g.IsoGraph(False,False)
UDUG.addNode('a')
UDUG.addNode('b')
UDUG.addNode('c')
UDUG.addNode('d')
UDUG.specEdge('a','b',1)
UDUG.specEdge('a','c',1)
UDUG.specEdge('a','d',1)
UDUG.specEdge('b','c',1)
print("internal matrix representation:")
UDUG.audit()
print("adjacency matrix")
print str(UDUG.adjList())
print("other tests:")
print ("weighted? " + str(UDUG.isWeighted()))
print("directed? " + str(UDUG.isDirected()))

''' undirected weighted UDWG '''
print('\n'+"undirected weighted:")
UDWG = g.IsoGraph(True,False)
UDWG.addNode('a')
UDWG.addNode('b')
UDWG.addNode('c')
UDWG.addNode('d')
UDWG.specEdge('a','b',10)
UDWG.specEdge('a','c',100)
UDWG.specEdge('a','d',1000)
UDWG.specEdge('b','c',10000)
print("internal matrix representation:")
UDWG.audit()
print("adjacency matrix:")
print str(UDWG.adjList())
print("other tests:")
print ("weighted? " + str(UDWG.isWeighted()))
print("directed? " + str(UDWG.isDirected()))

